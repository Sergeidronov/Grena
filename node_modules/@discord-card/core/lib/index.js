"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
const canvas_1 = require("canvas");
canvas_1.CanvasRenderingContext2D.prototype.roundRect = function (x, y, w, h, r) {
    if (w < 2 * r)
        r = w / 2;
    if (h < 2 * r)
        r = h / 2;
    this.beginPath();
    this.moveTo(x + r, y);
    this.arcTo(x + w, y, x + w, y + h, r);
    this.arcTo(x + w, y + h, x, y + h, r);
    this.arcTo(x, y + h, x, y, r);
    this.arcTo(x, y, x + w, y, r);
    this.closePath();
    return this;
};
canvas_1.CanvasRenderingContext2D.prototype.changeFont = function (font) {
    var _a;
    const fontArgs = this.font.split(' ');
    let size = (_a = fontArgs[0]) !== null && _a !== void 0 ? _a : '15px';
    this.font = `${size} ${font}, SegoeUI, SegoeUIEmoji`; /// using the first part
    return this;
};
canvas_1.CanvasRenderingContext2D.prototype.changeFontSize = function (size) {
    const fontArgs = this.font.split(' ');
    this.font = `${size} ${fontArgs.slice(1).join(' ')}`; /// using the last part
    return this;
};
canvas_1.CanvasRenderingContext2D.prototype.blur = function (strength = 1) {
    this.globalAlpha = 0.5; // Higher alpha made it more smooth
    // Add blur layers by strength to x and y
    // 2 made it a bit faster without noticeable quality loss
    for (var y = -strength; y <= strength; y += 2) {
        for (var x = -strength; x <= strength; x += 2) {
            // Apply layers
            this.drawImage(this.canvas, x, y);
            // Add an extra layer, prevents it from rendering lines
            // on top of the images (does makes it slower though)
            if (x >= 0 && y >= 0) {
                this.drawImage(this.canvas, -(x - 1), -(y - 1));
            }
        }
    }
    this.globalAlpha = 1.0;
    return this;
};
require("./fonts");
__exportStar(require("./gradient"), exports);
//# sourceMappingURL=index.js.map