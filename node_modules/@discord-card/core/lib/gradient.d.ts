import { CanvasRenderingContext2D as ctx2D, CanvasGradient } from 'canvas';
declare type GradientType = 'linear' | 'radial' | 'conic';
declare type GradientStop = {
    offset: number;
    color: string;
} | {
    off: number;
    col: string;
} | [number | string];
export declare abstract class Gradient {
    readonly type: GradientType;
    colors: {
        offset: number;
        color: string;
    }[];
    constructor(type: GradientType, ...colors: GradientStop[]);
    addColorStop(offset: number, color: string): void;
    abstract toString(ctx: ctx2D): CanvasGradient;
    abstract toString(ctx: ctx2D, x: number, y: number): CanvasGradient;
    abstract toString(ctx: ctx2D, x: number, y: number, w: number, h: number): CanvasGradient;
}
export declare class LinearGradient extends Gradient {
    type: 'linear';
    constructor(...colors: GradientStop[]);
    toString(ctx: ctx2D, xPos?: number, yPos?: number, width?: number, height?: number): CanvasGradient;
}
export declare class RadialGradient extends Gradient {
    type: 'radial';
    constructor(...colors: GradientStop[]);
    toString(ctx: ctx2D, xPos?: number, yPos?: number, width?: number, height?: number): CanvasGradient;
}
export declare class ConicGradient extends Gradient {
    type: 'conic';
    constructor(...colors: GradientStop[]);
    toString(ctx: ctx2D, xPos?: number, yPos?: number, width?: number, height?: number): CanvasGradient;
}
export {};
//# sourceMappingURL=gradient.d.ts.map