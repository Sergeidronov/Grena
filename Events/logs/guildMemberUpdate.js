// Logs whenever a member's roles have changed, their nickname changed, they started boosting, or their server avatar changed

const { MessageEmbed, GuildMember } = require("discord.js");
const LogsSetupData = require("../../Memory/Schems/LogsSetupDB");

module.exports = {
  name: "guildMemberUpdate",
  /**
   * @param {GuildMember} oldMember
   * @param {GuildMember} newMember
   */
  async execute(oldMember, newMember) {
    const Data = await LogsSetupData.findOne({
      GuildID: oldMember.guild.id,
    });
    if (!Data) return;
    
    const logChannel = oldMember.guild.channels.cache.get(Data.LogsChannel); 
    const logs = await oldMember.guild.fetchAuditLogs({
      limit: 1,
    })
    const log = logs.entries.first(); // Fetches the logs and takes the last entry

    if (log.action == "MEMBER_ROLE_UPDATE") { // If the last entry fetched is of the type "MEMBER_ROLE_UPDATE" execute code
      if (oldMember.roles.cache.size == newMember.roles.cache.size) return // If number of roles member has didnt change return
      const memberRoleUpdateEmbed = new MessageEmbed()
        .setTitle("<:icons_updatemember:866943416256167936> –î–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞/—É–¥–∞–ª–µ–Ω–∞ –æ–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–æ–ª–µ–π")
        .setDescription(`> –°–ª–µ–¥—É—é—â–∏–µ —Ä–æ–ª–∏ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã / —É–¥–∞–ª–µ–Ω—ã ${oldMember} \`${log.executor.tag}\``)
        .setTimestamp()
        .setFooter(oldMember.guild.name)

      if (oldMember.roles.cache.size > newMember.roles.cache.size) { // If newMember has more roles it means roles were added
        const p = log.changes.find(x => x.key == "$remove").new.map(e => `<@&${e.id}>`).join(" ") // maps roles by their id to mention them
        memberRoleUpdateEmbed.addField("–£–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–æ–ª—å(–∏) üìõ", p).setColor("RED")
      };
      if (oldMember.roles.cache.size < newMember.roles.cache.size) { // If oldMember has more roles it means roles were removed
        const p = log.changes.find(x => x.key == "$add").new.map(e => `<@&${e.id}>`).join(" ") // maps roles by their id to mention them
        memberRoleUpdateEmbed.addField("–î–æ–±–∞–≤–ª–µ–Ω–Ω–∞—è —Ä–æ–ª—å(–∏) ‚úÖ", p).setColor("GREEN")
      }
      await createAndDeleteWebhook(memberRoleUpdateEmbed) // executes the function bellow with as parameter the embed name

    } else if (log.action == "MEMBER_UPDATE") { // If the last entry fetched is of the type "MEMBER_UPDATE" execute code
      const memberUpdateEmbed = new MessageEmbed()
        .setColor("ORANGE")
        .setTitle("<:icons_updatemember:866943416256167936> –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω")
        .setTimestamp()
        .setFooter(oldMember.guild.name)

      if (oldMember.nickname !== newMember.nickname) { // If nickname changed execute code
        memberUpdateEmbed.setDescription(`> ${oldMember}'–Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω \`${log.executor.tag}\``)
          .addFields(
            {
              name: "–°—Ç–∞—Ä—ã–π –Ω–∏–∫–Ω–µ–π–º",
              value: oldMember.nickname ? `\`${oldMember.nickname}\`` : "–†–∞–Ω—å—à–µ –Ω–∏–∫–∞–∫–æ–≥–æ –Ω–∏–∫–Ω–µ–π–º–∞ –Ω–µ –±—ã–ª–æ"
            },
            {
              name: "–ù–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º",
              value: newMember.nickname ? `\`${newMember.nickname}\`` : "–†–∞–Ω—å—à–µ –Ω–∏–∫–∞–∫–æ–≥–æ –Ω–∏–∫–Ω–µ–π–º–∞ –Ω–µ –±—ã–ª–æ"
            }
          )
      }
      if (!oldMember.premiumSince && newMember.premiumSince) { // If oldMember has premiumSince and newMember does it means they started to boost
        memberUpdateEmbed.setDescription(`> ${oldMember} –Ω–∞—á–∞–ª –±—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —Å–µ—Ä–≤–µ—Ä`)
      }
    }

    async function createAndDeleteWebhook(embedName) {
      await logChannel.createWebhook(oldMember.guild.name, { // Creates a webhook in the logging channel specified before
        avatar: oldMember.guild.iconURL({ format: "png" })
      }).then(webhook => {
        webhook.send({ // Sends the embed through the webhook
          embeds: [embedName]
        }).then(() => webhook.delete().catch(() => { })) // Deletes the webhook and catches the error if any
      });
    }
  }
}


// Code created by ÂàÄ·É¢‰πÉ·É¢„ÅÆ·Å¶#0001 on discord
// Licence: MIT
