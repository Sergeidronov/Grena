const { 
    ButtonInteraction, 
    MessageEmbed, 
    MessageActionRow, 
    MessageButton
} = require('discord.js');
const DB = require('../../Memory/Schems/TicketDB');
const TicketSetupData = require('../../Memory/Schems/TicketSetupDB');

const wait = require('util').promisify(setTimeout);

module.exports = {
    name: 'interactionCreate',
    /**
     * 
     * @param {ButtonInteraction} interaction 
     */
    async execute(interaction) {
        if(!interaction.isButton()) return;

        const { guild, member, customId } = interaction;
        
        const Data = await TicketSetupData.findOne({GuildID: guild.id });
        if(!Data) return;


      if(!["ticketdiscord"].includes(customId)) return;

     const data = DB.findOne({ GuildID: guild.id })
const ID = ((await data.countDocuments()) + 1).toString();    
const h = await DB.findOne({ MembersID: member.id, GuildID: guild.id, Closed: false }) 
if(h) return interaction.reply({content: "> **–õ–∏–º–∏—Ç –∂–∞–ª–æ–± –¥–æ—Å—Ç–∏–≥–Ω—É—Ç, —É –≤–∞—Å —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞ –∂–∞–ª–æ–±–∞", ephemeral: true})
        await guild.channels
        .create(`${customId + '-' + ID }` ,{
            type: 'GUILD_TEXT',
            parent: Data.Category,
            permissionOverwrites: [
                {
                    id: member.id, 
                    allow: ['SEND_MESSAGES', 'VIEW_CHANNEL', 'READ_MESSAGE_HISTORY', "ATTACH_FILES"]
                },
                {   id: Data.Handlers,
                    allow: ["SEND_MESSAGES", "VIEW_CHANNEL", "READ_MESSAGE_HISTORY"]  },
                {
                    id: Data.Everyone,
                    deny: ['SEND_MESSAGES', 'VIEW_CHANNEL', 'READ_MESSAGE_HISTORY']
                }
            ],
        }).then(async (channel) => {
            await DB.create({
                GuildID: guild.id,
                MembersID: member.id,
                TicketID: ID,
                ChannelID: channel.id,
                Closed: false,
                Deleted: false,
                Claimed: false,
                OpenTime: parseInt(channel.createdTimestamp / 1000),
                ClaimedBy: "–ù–∏–∫—Ç–æ –Ω–µ –ø—Ä–∏–Ω—è–ª —ç—Ç—É –∂–∞–ª–æ–±—É"
            });
      
            const Embed = new MessageEmbed()
            .setAuthor(({name: `${member.user.username} [${member.user.id}]`, iconURL: `${member.displayAvatarURL({ dynamic: true })}`}))
            .setTitle("–§–æ—Ä–º–∞ –ø–æ–¥–∞—á–∏ –∂–∞–ª–æ–±—ã:")
            .setDescription(`
            **1. –î–∏—Å–∫–æ—Ä–¥ –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è**
            **2. –ü—É–Ω–∫—Ç –ø—Ä–∞–≤–∏–ª –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –Ω–∞—Ä—É—à–µ–Ω—ã/–û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è**
            **3. –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ (–°–∫—Ä–∏–Ω,–≤–∏–¥–µ–æ)**  
            `)          
            .setFooter({text: "–ï—Å–ª–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ–µ, –º–æ–¥–µ—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞ –º–æ–∂–µ—Ç –µ–≥–æ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å."})
            .setColor('GREEN')
    
        
            const Buttons = new MessageActionRow();
            Buttons.addComponents(
                new MessageButton()
                .setCustomId('claim')
                .setLabel('–ü—Ä–∏–Ω—è—Ç—å')
                .setStyle('PRIMARY')
                .setEmoji('üîí'),
                new MessageButton()
                .setCustomId('del')
                .setLabel('–ó–∞–∫—Ä—ã—Ç—å')
                .setStyle('DANGER')
                .setEmoji('üîí')
            );
    await interaction.deferReply({ ephemeral: true });

    await wait (1000)
            channel.send({content: `${member} `, embeds: [Embed], components: [Buttons]});
    
           await interaction.editReply({content: `${member} –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ—é –∂–∞–ª–æ–±—É –≤ –∫–∞–Ω–∞–ª–µ ${channel}`, ephemeral: true})

        });
        
    },
};
